                        USING THE FORM CLASS

START WITH FORMS

first, import the Form class:
from flamewok import Form

create a form:
form = Form([
        < some tuples >,
        ...
    ], error_message=<str>)

The tuples must be constructed like this:
(str(the attribute used to gather the data), str(a text to display before the prompt), validator (optional), error_message(optional)).
validator: see VALIDATORS
error_message (optional in a field): will overload both the form error_message and the default one.
error_message (optional in a form): will overload the default error_message.

display the form and gather datas:
response = form.ask()

The response obtained is an object Response, that have the attributes set in the tuples given at the form creation.
The data gathered is now accessible doing:
my_data = response.attribute

(Basic python tip: you can convert it to a dict doing: my_dictionnary = response.__dict__)


MANIPULATING A FORM

A Form have fields (class Field) stored in the list Form.fields, it can then be used as any list, to
insert/remove/append/etc... some Fields objects in it.


FIELDS

The class Field can be imported: from flamewok import Field

create a Field:
field = Field(str(name), str(label), validator, error_message)

name : the name is the only argument absolutely required, it will be the attribute of the
response you'll get from Form.ask().
ex: field('toto')
    response = form.ask()
    response.toto

label: text displayed before the prompt

validator: see 'VALIDATORS'

error_message: custom message to display if the validator returns Flase, it overloads
both the default error_message and a form error_message.


VALIDATORS

A validator is any function that returns a boolean (see example7),
and takes one and only argument (it will be provided by the user's entry).
Flamewok provides a prebuilt helper for validation : check_type

check_type(value, type): returns a boolean

a validator could be for example:
    lambda x: check_type(x, int)

Note: the real type of an input is always a str, check_type is just
    checking if the value COULD be converted into the given type.
    For the same reason, 'isinstance()' can't be of any help here.
